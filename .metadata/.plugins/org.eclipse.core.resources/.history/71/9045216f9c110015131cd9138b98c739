/*
 * @brief State Configurable Timer (SCT) PWM example
 *
 * @note
 * Copyright(C) NXP Semiconductors, 2014
 * All rights reserved.
 *
 * @par
 * Software that is described herein is for illustrative purposes only
 * which provides customers with programming information regarding the
 * LPC products.  This software is supplied "AS IS" without any warranties of
 * any kind, and NXP Semiconductors and its licensor disclaim any and
 * all warranties, express or implied, including all implied warranties of
 * merchantability, fitness for a particular purpose and non-infringement of
 * intellectual property rights.  NXP Semiconductors assumes no responsibility
 * or liability for the use of the software, conveys no license or rights under any
 * patent, copyright, mask work right, or any other intellectual property rights in
 * or to any products. NXP Semiconductors reserves the right to make changes
 * in the software without notification. NXP Semiconductors also makes no
 * representation or warranty that such application will be suitable for the
 * specified use without further testing or modification.
 *
 * @par
 * Permission to use, copy, modify, and distribute this software and its
 * documentation is hereby granted, under NXP Semiconductors' and its
 * licensor's relevant copyrights in the software, without fee, provided that it
 * is used in conjunction with NXP Semiconductors microcontrollers.  This
 * copyright, permission, and disclaimer notice must appear in all copies of
 * this code.
 */

#include "board.h"

/*****************************************************************************
 * ADC section variables declaration
 ****************************************************************************/



int sinx[55]={50,56,62,68,73,78,83,87,91,94,97,98,100,100,100,99,97,95,92,88,84,79,74,69,63,57,51,45,39,33,28,23,18,\
13,10,6,4,2,1,0,0,1,3,5,8,11,15,20,25,30,36,42,48,};
int square[55]={100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,0,0,0,0,0,0,\
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};



/*****************************************************************************
 * common section variables declaration
 ****************************************************************************/

/* Systick timer tick rate, to change duty cycle */

float freq1=1.0,freq2=1.0,vout;
double calc_point(double val, double isi, double fsi, double isl, double fsl);
void UpdateValues();
uint32_t cnt1 = 0, cnt2 = 0;
int main(){


	int  out_dp = 0;
	int  x=0,y=0,frequency=0;
	int switch1a,switch1b,switch1c,switch2a,switch2b,switch2c;
	SystemCoreClockUpdate();
	Board_Init();
	InitDAC();
	InitADC();
	InitGPIO();
	SysTick_Config(Chip_Clock_GetSysTickClockRate() / TICKRATE_HZ);
	SysTick_Config(SystemCoreClock / TICKRATE_HZ);

	while (1) {
/*
 *
 * 	check for dip switches state
 *
 */
		switch2a=Chip_GPIO_ReadPortBit(LPC_GPIO, 0, 14);
		switch2b=Chip_GPIO_ReadPortBit(LPC_GPIO, 0, 15);
		switch2c=Chip_GPIO_ReadPortBit(LPC_GPIO, 0, 16);

		switch1a=Chip_GPIO_ReadPortBit(LPC_GPIO, 0, 24);
		switch1b=Chip_GPIO_ReadPortBit(LPC_GPIO, 0, 25);
		switch1c=Chip_GPIO_ReadPortBit(LPC_GPIO, 0, 26);
/*																	 */


		if(freq1>0.)
			frequency=(int)OUT_STEP_CNT/(freq1*10);
		if (cnt1 >= frequency) {
			if(switch1a){		// DC
				out_dp=100;
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSquareCh1,false);
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSinCh1,false);
			}
			else if(switch1b){		// square
				out_dp=square[x];
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSquareCh1,true);
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSinCh1,false);
			}
			else if(switch1c){	// sin
				out_dp=sinx[x];
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSquareCh1,false);
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSinCh1,true);
			}
			else {
				out_dp=0;
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSquareCh1,false);
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSinCh1,false);
			}

			if (++x > STEPS) {
				x = 0;
			}


			Chip_SCTPWM_SetDutyCycle(SCT_PWM, SCT_PWM_OUT1,
			Chip_SCTPWM_PercentageToTicks(SCT_PWM, out_dp));
			cnt1 = 0;
		}
		else {
			out_dp=calc_point(cnt1, 0, sinx[x+1]-sinx[x] , sinx[x], sinx[x+1]);

		}

		if(freq2>0.)
			frequency=(int)OUT_STEP_CNT/(freq2*10);
		if (cnt2 >= frequency) {
			if(switch2a){		// DC
				out_dp=100;
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSquareCh2,false);
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSinCh2,false);
			}
			else if(switch2b){		// square
				out_dp=square[y];
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSquareCh2,true);
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSinCh2,false);
			}
			else if(switch2c){	// sin
				out_dp=sinx[y];
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSquareCh2,true);
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSinCh2,false);
			}
			else {
				out_dp=0;
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSquareCh2,false);
				Chip_GPIO_WritePortBit(LPC_GPIO, 0, switchSinCh2,false);
			}



			if (++y > STEPS) {
				y = 0;
			}

			/* Increase dutycycle by 10% every second */
			Chip_SCTPWM_SetDutyCycle(SCT_PWM, SCT_PWM_OUT2,
			Chip_SCTPWM_PercentageToTicks(SCT_PWM, out_dp));
			cnt2 = 0;

		}


		if(sequence0Complete){
			UpdateValues();
			sequence0Complete=0;
		}

		//__WFI();
	}

}

void UpdateValues(){
	double tmp;
	int states;
	tmp=(0xfff0 & Chip_ADC_GetDataReg(LPC_ADC0,1 ))>>4;
	tmp=calc_point((double)tmp,0.,4096.,0.1,10.);
	freq1=(freq1*9.0+tmp)/10.0;

	tmp=(0xfff0 & Chip_ADC_GetDataReg(LPC_ADC0,2 ))>>4;
	tmp=calc_point((double)tmp,0.,4096.,0.1,10.);
	freq2=(freq2*9.0+tmp)/10.0;

	tmp=(0xfff0 & Chip_ADC_GetDataReg(LPC_ADC0,3 ))>>4;
	tmp=calc_point((double)tmp,LOWEDGE_VOLTAGEIN,HIEDGE_VOLTAGEIN,0,10.);
	vout=(vout*9.0+tmp)/10.0;

	states=0;
	switch ((int)vout){

	case 1: states= (1<<7); break;
	case 2: states= (1<<7) | (1<<8); break;
	case 3: states= (1<<7) | (1<<8) | (1<<10) ; break;
	case 4: states= (1<<7) | (1<<8) | (1<<10) | (1<<0) ; break;
	case 5: states= (1<<7) | (1<<8) | (1<<10) | (1<<0) | (1<<1) ; break;
	case 6: states= (1<<7) | (1<<8) | (1<<10) | (1<<0) | (1<<1) | (1<<2) ; break;
	case 7: states= (1<<7) | (1<<8) | (1<<10) | (1<<0) | (1<<1) | (1<<2) | (1<<3); break;
	case 8: states= (1<<7) | (1<<8) | (1<<10) | (1<<0) | (1<<1) | (1<<2) | (1<<3) | (1<<4); break;
	case 9: states= (1<<7) | (1<<8) | (1<<10) | (1<<0) | (1<<1) | (1<<2) | (1<<3) | (1<<4) | (1<<5); break;
	case 10: states=(1<<7) | (1<<8) | (1<<10) | (1<<0) | (1<<1) | (1<<2) | (1<<3) | (1<<4) | (1<<5) | (1<<6); break;
	default :
		states=0x0; break;

	}
	Chip_GPIO_SetMaskedPortValue(LPC_GPIO, 1, states);

}




/**
 * @brief	Handle interrupt from SysTick timer
 * @return	Nothing
 */
void SysTick_Handler(void)
{
	static uint32_t count;
	cnt1 ++;
	cnt2 ++;
	count++;
	if (count >= (TICKRATE_HZ / 10)) {
		count = 0;
		/* Manual start for ADC0 conversion sequence A */
		Chip_ADC_StartSequencer(LPC_ADC0, ADC_SEQA_IDX);
	}
}

/**
 * @brief	Handle interrupt from ADC0 sequencer A
 * @return	Nothing
 */
void ADC0A_IRQHandler(void)
{
	uint32_t pending;

	/* Get pending interrupts */
	pending = Chip_ADC_GetFlags(LPC_ADC0);

	/* Sequence A completion interrupt */
	if (pending & ADC_FLAGS_SEQA_INT_MASK) {
		sequence0Complete = true;
	}

	/* Clear any pending interrupts */
	Chip_ADC_ClearFlags(LPC_ADC0, pending);


}



double calc_point(double val, double isi, double fsi, double isl, double fsl)
{

			return (val-isi)*(fsl-isl)/(fsi-isi)+isl;

}
